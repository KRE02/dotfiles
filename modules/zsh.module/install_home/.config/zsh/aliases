#!/usr/bin/zsh
source "$ZSH_CONFIG_HOME/venv_prefix"

alias ls='ls -ltha --color --group-directories-first'

### editor
alias vim=nvim
alias vi=nvim
alias e="$EDITOR"

### bookmarks
alias g=jump

### utility
function targz_() {
    tar -zcvf "$1.tar.gz" "$1" && rm -r "$1";
}
function untargz_() {
    tar -zxvf "$1" && rm -r "$1";
}
alias targz="targz_"
alias untargz="untargz_"

function cdd_() {
    [ -d "$1" ] || {
        mkdir -p "$1"
    }
    pushd "$1"
}
alias cdd="cdd_"

### python
function mkvenv() {
    VENV_ROOT="$(mktemp -d)"
    python -m venv "$VENV_ROOT"
    __venv_source_i "$VENV_ROOT"
}

### cmake
function cmake_cd() {
    [ -f "./CMakeLists.txt" ] && {
        [ -d "./build" ] || {
            mkdir build
	    touch build/.nobackup
        };
        cd ./build
    };
}
alias cmcd="cmake_cd"

function cmake_build() {
    cmake_cd
    [ -f "../CMakeLists.txt" ] && {
        [ -f "./CMakeCache.txt" ] || {
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
                  -DCMAKE_BUILD_TYPE=Debug \
                  -GNinja ..
        };
        cmake --build .

	[ -f compile_commands.json ] && {
	    ln -srf ./build/compile_commands.json ../compile_commands.json
	}
    };
}
alias cmb="cmake_build"

function cmake_clean() {
    cmake_cd
    [ -f "../CMakeLists.txt" ] && {
        cmake --build . --target clean
    };
}
alias cmc="cmake_clean"

function cmake_rm() {
    cmake_cd
    [ -f "../CMakeLists.txt" ] && {
	cd ..
        rm -rf ./build
        cmake_cd
    };
}
alias cmrm="cmake_rm"
