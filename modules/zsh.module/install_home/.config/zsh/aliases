#!/usr/bin/zsh
source "$ZSH_CONFIG_HOME/venv_prefix"

alias ls='ls -ltha --color --group-directories-first'

### editor
if hash nvim 2>/dev/null; then
    alias vim=nvim
    alias vi=nvim
fi

if hash emacsclient 2>/dev/null; then
    export EDITOR="emacsclient -c -a emacs"
else
    export EDITOR="vim"
fi

alias e="$EDITOR"

### bookmarks
alias g=jump

### dotfiles
if [[ -f "$HOME/Workspace/dotfiles/setup" ]]; then
    function dotfiles-setup() {
        "$HOME/Workspace/dotfiles/setup" # Execute setup.
        source "$HOME/.zshrc"            # Reload ZSH config.
    }
fi

if hash yt-dlp; then
    alias ytdl=yt-dlp
    alias youtube-dl=yt-dlp
fi

### utility
function targz_() {
    tar -zcvf "$1.tar.gz" "$1" && rm -r "$1";
}
function untargz_() {
    tar -zxvf "$1" && rm -r "$1";
}
alias targz="targz_"
alias untargz="untargz_"

function cdd_() {
    [ -d "$1" ] || {
        mkdir -p "$1"
    }
    pushd "$1"
}
alias cdd="cdd_"

### python
function mkvenv() {
    VENV_ROOT="$(mktemp -d)"
    python -m venv "$VENV_ROOT"
    __venv_source_i "$VENV_ROOT"
}

### env
function doenv() {
    if [ -f "./.doenv" ]; then
	echo "Sourcing environment file"
        source "./.doenv";
    else
        echo "No environment file"
    fi
}

function eenv() {
    $EDITOR ".doenv" && chmod a+x ".doenv" && doenv
}

### python
function venvactivate() {
    if [ -d ".venv" ]; then
        ./.venv/bin/activate
    fi
}

### cmake
function cmake_build_dir_name() {
    if [[ -n "${CMAKE_BUILD_TYPE:-}" ]]; then
        echo "build-${CMAKE_BUILD_TYPE:l}"
    else
        echo "build-debug"
    fi
}

function cmake_cd() {
    [ -f "./CMakeLists.txt" ] && {
        dir="$(cmake_build_dir_name)"
        [ -d "./$dir" ] || {
            mkdir "$dir"
            touch "$dir/.nobackup"
        };
        cd "./$dir"
    };
}
alias cmcd="cmake_cd"

function cmake_build() {
    cmake_cd
    [ -f "../CMakeLists.txt" ] && {
	[ -d "../.venv" ] && {
	    source ../.venv/bin/activate
	}
        [ -f "./CMakeCache.txt" ] || {
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
                  "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-Debug}" \
                  "-G${CMAKE_GENERATOR:-Ninja}" ..
        };

        cmake --build . --target ${1:-all}

        [ -f compile_commands.json ] && {
            (cd .. && ln -sf "$(cmake_build_dir_name)/compile_commands.json")
        }
    };
}
alias cmb="cmake_build"

function cmake_clean() {
    cmake_cd
    cmake_build clean
}
alias cmc="cmake_clean"

function cmake_rm() {
    cmake_cd
    [ -f "../CMakeLists.txt" ] && {
        cd ..
        rm -rf ./build
        cmake_cd
    };
}
alias cmrm="cmake_rm"

### dnf
if hash dnf 2>/dev/null; then
    alias dnfup=sudo dnf update -y
    alias dnfinst=sudo dnf install -y
    alias dnfupoff=sudo dnf update -y && systemctl poweroff
fi
