#!/usr/bin/zsh
source "$ZSH_CONFIG_HOME/venv_prefix"

alias ls='ls -ltha --color --group-directories-first'

### editor
if hash nvim 2>/dev/null; then
    alias vim=nvim
    alias vi=nvim
fi

if hash emacsclient 2>/dev/null; then
    export EDITOR="emacsclient -c -a emacs"
else
    export EDITOR="vim"
fi

alias e="$EDITOR"

function o() {
    local args="$@"
    xdg-open ${args:-.}
}

alias gw="pushd ~/Workspace"
alias gtmp="pushd $(mktemp -d); echo $PWD"

### dotfiles
if [[ -f "$HOME/Workspace/dotfiles/setup" ]]; then
    function dotfiles-setup() {
        "$HOME/Workspace/dotfiles/setup" # Execute setup.
        source "$HOME/.zshrc"            # Reload ZSH config.
    }
fi

if hash yt-dlp 2>/dev/null; then
    alias ytdl=yt-dlp
    alias youtube-dl=yt-dlp
fi

### utility
function targz_() {
    tar -zcvf "$1.tar.gz" "$1" && rm -r "$1";
}
function untargz_() {
    tar -zxvf "$1" && rm -r "$1";
}
alias targz="targz_"
alias untargz="untargz_"

function cdd_() {
    [ -d "$1" ] || {
        mkdir -p "$1"
    }
    pushd "$1"
}
alias cdd="cdd_"

### python
function mkvenv() {
    VENV_ROOT="$(mktemp -d)"
    python -m venv "$VENV_ROOT"
    __venv_source_i "$VENV_ROOT"
}

### env
function doenv() {
    if [ -f "./.doenv" ]; then
	echo "Sourcing environment file"
        source "./.doenv";
    else
        echo "No environment file"
    fi
}

function eenv() {
    $EDITOR ".doenv" && chmod a+x ".doenv" && doenv
}

### python
function venvactivate() {
    if [ -d ".venv" ]; then
        ./.venv/bin/activate
    fi
}

### cmake
export CMAKE_GENERATOR="Ninja"
export MAKE_CMAKE_GENERATOR="${CMAKE_GENERATOR}"
export BUILD_DIR="cmake-build-debug"
export CMAKE_BUILD_TYPE="Debug"
export CMAKE_LINKER="mold"

function cmake_test() {
    [ -f "CMakeLists.txt" ] && {
        if [[ -f ".cmb-last" ]]; then
            source ".cmb-last"
        fi

        local build="${BUILD_DIR:?BUILD_DIR must be set!}"
        ctest --test-dir="${build}" $@
    }
}

function cmake_build() {
    [ -f "CMakeLists.txt" ] && {
        if [[ -f ".cmb-last" ]]; then
            source ".cmb-last"
        else
            echo <<EOF
export BUILD_DIR='${BUILD_DIR}'
export CMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}'"
export CMAKE_GENERATOR='${CMAKE_GENERATOR}'"
export CMAKE_LINKER='${CMAKE_LINKER}'"
EOF
            > ".cmb-last"
        fi

        local build="${BUILD_DIR:?BUILD_DIR must be set!}"

        mkdir -p "$build"
        touch "$build/.nobackup"
        touch "$build/.ignore"

        [ -d ".venv" ] && {
            source .venv/bin/activate
        }

        [ -f "${build}/CMakeCache.txt" ] || {
            cmake "-B$build" \
                  "-DCMAKE_EXPORT_COMPILE_COMMANDS=On" \
                  "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-Debug}" \
                  "-DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=${CMAKE_LINKER:-mold}" \
                  "-DCMAKE_SHARED_LINKER_FLAGS=-fuse-ld=${CMAKE_LINKER:-mold}" \
                  "-G${CMAKE_GENERATOR:-Ninja}" \
                  .
        };

        cmake --build "$build" --target ${1:-all}

        [ -f "$build/compile_commands.json" ] && {
            ln -sf "$build/compile_commands.json"
        }
    };
}
alias cmb="cmake_build"
alias cmt="cmake_test"

function cmake_clean() {
    local build="${BUILD_DIR:-build}"

    [ -f "CMakeLists.txt" ] && {
        rm -rf "${build:?BUILD_DIR is not set!}"
    }
}
alias cmc="cmake_clean"

alias cmdeb="export CMAKE_BUILD_TYPE=Debug; export BUILD_DIR=cmake-build-debug;"
alias cmrel="export CMAKE_BUILD_TYPE=Release; export BUILD_DIR=cmake-build-release;"

### dnf
if hash dnf 2>/dev/null; then
    alias dnfup=sudo dnf update -y
    alias dnfinst=sudo dnf install -y
    alias dnfupoff=sudo dnf update -y && systemctl poweroff
fi
