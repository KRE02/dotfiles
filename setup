#!/bin/env bash
set -eu

script_dir=$(dirname "$(realpath "$0"))")

export PATH="$script_dir/bin:$PATH"
export DOTFILES_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}/dotfiles"
export DOTFILES_CACHE="${XDG_CACHE_HOME:-${HOME}/.cache}/dotfiles"

while [[ -n "${1:-}" ]]; do
    case "$1" in
        help)
            echo "setup"
            echo ""
            echo "  Config: ${DOTFILES_CONFIG_HOME}"
            echo "  Cache:  ${DOTFILES_CACHE}"
            echo ""
            echo "Commands:"
            echo "  clean-cache            Cleans the cache directory"
            echo "  rerun-once             Rerun all module scripts"
            echo ""
            echo "Options:"
            echo "  --interactive-install  Force install-tree to interactive"
            echo "  --diff                 Do not install files but show a diff"
            exit 0
            ;;
        clean-cache)
            if [[ -n "${DOTFILES_CACHE:-}" ]]; then
                rm -rf "$DOTFILES_CACHE"
            fi
            shift
            ;;
        rerun-once)
            rerun_once=1
            shift
            ;;
        *)
            break
            ;;
    esac
done

install_tree_opts=()

while [ -n "${1:-}" ]; do
    case "$1" in
        --interactive-install)
            install_tree_opts=( "${install_tree_opts[@]}" "--interactive" )
            shift
            ;;
        -d|--diff)
            install_tree_opts=( "${install_tree_opts[@]}" "--diff" )
            shift
            ;;
        *)
            echo "Unknown option $1"
            exit 1
    esac
done


mkdir -p "$DOTFILES_CONFIG_HOME" 2> /dev/null
mkdir -p "$DOTFILES_CACHE" 2> /dev/null

function step {
    echo "${step_indent:-}${*}"
}
export -f step

function grep_field {
    perl -ne "print(\"\$1\\n\") if /^\\s*$1:\\s*(.*)\\s*/"
}
export -f grep_field

function module_once_file {
    echo "$DOTFILES_CONFIG_HOME/$(basename "$m")_once"
}

function module_options_file {
    echo "$DOTFILES_CONFIG_HOME/$(basename "$m").options.json"
}

function get_option {
    options get "$(module_options_file)" "$1"
}
export -f get_option

mapfile -t modules <<< "$(find "$script_dir/modules" -iname "*.module")"

for m in "${modules[@]}"; do
    m_name="$(basename "$m")"
    m_name="${m_name%.module}"

    tput bold; echo "â†’ $m_name"; tput sgr0;
    export step_indent="  "

    # Setup module options
    if [[ ! -f "$(module_options_file)" ]] &&
        [[ -f "$m/options.json" ]]; then
        if ! options ask "$m/options.json" "$(module_options_file)"; then
            # Remove options on failure
            rm "$(module_options_file)"
        fi
    fi

    # Skip disabled modules
    if [[ -f "$(module_options_file)" ]] &&
        [[ "$(options get "$(module_options_file)" "enabled")" != "True" ]]; then
        echo "  ignoring module"
        continue
    fi

    if [[ -d "$m/install_home" ]]; then
        echo "  installing to home"
        install-tree "${install_tree_opts[@]}" "$m/install_home" "$HOME" || true
    fi

    if [[ -d "$m/install_root" ]]; then
        echo "  installing to root"
        install-tree -s "${install_tree_opts[@]}" "$m/install_root" "/" || true
    fi

    if [[ -f "$m/once" ]]; then
        once_file=$(module_once_file)
        once_hash=$(md5sum "$m/once")

        if [[ -n "${rerun_once:-}" ]]; then
            rm "$once_file" 2> /dev/null
        fi

        if [[ -f "$once_file" ]]; then
            if [[ "$(cat "$once_file")" != "$once_hash" ]]; then
                "$m/once" && {
                    echo "$once_hash" > "$once_file"
                }
            fi
        else
            "$m/once" && {
                echo "$once_hash" > "$once_file"
            }
        fi

    fi
done
